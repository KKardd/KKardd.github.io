<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-08-28T22:00:35+00:00</updated><id>/feed.xml</id><title type="html">개발일기장</title><subtitle></subtitle><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><entry><title type="html">Multiple Query, SubQuery, LeftJoinQuery</title><link href="/study/2024-08-22-Multiple-Query,-SubQuery,-LeftJoinQuery/" rel="alternate" type="text/html" title="Multiple Query, SubQuery, LeftJoinQuery" /><published>2024-08-22T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/Multiple%20Query,%20SubQuery,%20LeftJoinQuery</id><content type="html" xml:base="/study/2024-08-22-Multiple-Query,-SubQuery,-LeftJoinQuery/"><![CDATA[<hr />

<p>Prisma VS TypeORM 을 진행하면서 궁금한 점이 생겼던 걸 찾아보았고, 정리해보았다. (Shout-out to GPT)</p>

<p>Multiple Query, SubQuery, LeftJoinQuery 세 가지를 비교하는데, 이 글만 읽는 사람에게는 Multiple Query는 낯설 수 밖에 없다. 내가 지어냈기 때문이다. 간단하게는 다중 쿼리이다. 이전 게시글에서 Prisma가 사용했던 방식이라고 생각하면 편하다. 다중으로 쿼리문을 던져 Where In 절 같은 문구를 사용해 LeftJoin Query의 결과물과 같은 데이터 조회하는 방식이다.</p>

<p>똑같은 데이터임에도 각각 처한 상황에 따라 성능이 다르단걸 정리해보았다.</p>

<h1 id="multiple-query">Multiple Query</h1>

<h3 id="효율이-좋은-경우">효율이 좋은 경우:</h3>

<ul>
  <li><strong>병렬 처리 가능성</strong>: 데이터베이스가 여러 쿼리를 병렬로 처리할 수 있을 때. 이는 데이터베이스가 여러 CPU 코어를 활용할 수 있을 때 특히 유리하다.</li>
  <li><strong>네트워크 지연 최소화</strong>: 쿼리 결과가 매우 큰 경우, 결과를 부분적으로 가져와 처리하는 것이 더 효율적일 수 있다. 이때 여러 개의 쿼리를 사용하면 네트워크 지연을 줄일 수 있다.</li>
  <li><strong>캐싱 활용</strong>: 첫 번째 쿼리 결과를 캐싱하여 두 번째 쿼리에서 재사용할 수 있을 때. 이 경우 데이터베이스 부하를 줄이고 성능을 높일 수 있다.</li>
</ul>

<h3 id="효율이-좋지-않은-경우">효율이 좋지 않은 경우:</h3>

<ul>
  <li><strong>네트워크 오버헤드</strong>: 여러 쿼리를 실행해야 하므로, 네트워크 지연이 큰 환경에서 비효율적일 수 있다.</li>
  <li><strong>결과 결합의 복잡성</strong>: 여러 쿼리의 결과를 애플리케이션 레벨에서 결합하는 것이 복잡하고, 이로 인해 추가적인 메모리와 CPU 리소스가 소모될 수 있다.
→ Prisma는 애플리케이션 레벨에서 결합을 해준다. 그 과정에서 사용되는 메모리나 CPU 리소스는 무시하지 못하는게 맞는 거 같다.</li>
  <li><strong>데이터 일관성 문제</strong>: 여러 쿼리 사이에 데이터베이스 상태가 변경될 가능성이 있는 경우(트랜잭션 관리가 필요한 경우). 이 경우, 일관된 결과를 보장하기 어려울 수 있다.</li>
</ul>

<h1 id="서브쿼리">서브쿼리</h1>

<h3 id="효율이-좋은-경우-1">효율이 좋은 경우:</h3>

<ul>
  <li><strong>단일 쿼리로 문제 해결</strong>: 서브쿼리로 모든 데이터를 한 번에 가져올 수 있을 때. 데이터베이스 엔진이 서브쿼리를 최적화하여 효율적으로 처리할 수 있다면, 서브쿼리는 매우 효율적일 수 있다.</li>
  <li><strong>조건에 맞는 필터링</strong>: 서브쿼리를 사용하여 특정 조건에 맞는 데이터를 필터링하는 경우. 예를 들어, WHERE IN (subquery) 같은 경우, 해당 서브쿼리가 작은 결과를 반환할 때는 효율적이다.</li>
  <li><strong>데이터베이스 엔진 최적화</strong>: 서브쿼리를 잘 처리하는 데이터베이스 엔진을 사용할 때. 일부 데이터베이스는 서브쿼리에 대해 매우 효율적인 최적화를 수행할 수 있다.</li>
</ul>

<h3 id="효율이-좋지-않은-경우-1">효율이 좋지 않은 경우:</h3>

<ul>
  <li><strong>큰 데이터셋 처리</strong>: 서브쿼리가 매우 큰 데이터셋을 다루거나, 복잡한 연산이 포함된 경우. 이 경우 서브쿼리가 데이터베이스에 큰 부하를 줄 수 있다.</li>
  <li><strong>인덱스 활용 제한</strong>: 서브쿼리가 인덱스를 효율적으로 사용하지 못하는 경우. 이 경우, 전체 테이블 스캔이 발생할 수 있어 성능이 저하될 수 있다.</li>
  <li><strong>복잡한 서브쿼리</strong>: 서브쿼리가 중첩되거나, 여러 단계의 서브쿼리를 사용하는 경우. 이는 데이터베이스 성능 뿐 아니라, 가독성에도 문제가 생긴다고 생각한다.</li>
</ul>

<h3 id="left-join"><strong>LEFT JOIN</strong></h3>

<h3 id="효율이-좋은-경우-2">효율이 좋은 경우:</h3>

<ul>
  <li><strong>모든 데이터를 포함해야 할 때</strong>: 왼쪽 테이블의 모든 데이터를 포함하고, 오른쪽 테이블에서 일치하는 데이터를 결합해야 할 때. LEFT JOIN은 이 경우 매우 효율적이다.
    <ul>
      <li>아래 예에서 모든 직원의 이름과 그들이 속한 부서의 이름을 가져오되, 부서가 없는 직원도 포함해서 조회한다.
        <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">employees</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">departments</span><span class="p">.</span><span class="n">name</span>
<span class="k">FROM</span> <span class="n">employees</span>
<span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">departments</span> <span class="k">ON</span> <span class="n">employees</span><span class="p">.</span><span class="n">department_id</span> <span class="o">=</span> <span class="n">departments</span><span class="p">.</span><span class="n">id</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong>관계형 데이터베이스 최적화</strong>: 두 테이블 간의 관계가 명확하고, 외래 키 관계에 인덱스가 잘 설정되어 있는 경우 LEFT JOIN이 매우 효율적이다. 인덱스를 통해 조인 작업이 최적화될 수 있다.</li>
  <li><strong>결합된 결과가 작을 때</strong>: 조인 결과가 상대적으로 적고, 결합된 데이터의 크기가 작은 경우, LEFT JOIN은 매우 효율적일 수 있습니다. 데이터베이스는 이 작업을 효율적으로 처리할 수 있습니다.</li>
</ul>

<h3 id="효율이-좋지-않은-경우-2">효율이 좋지 않은 경우:</h3>

<ul>
  <li><strong>큰 데이터셋 간의 JOIN</strong>: 두 테이블 모두 매우 큰 데이터셋을 가지고 있고, 결과적으로 결합된 결과가 매우 클 때. 이 경우 JOIN 연산은 데이터베이스에 큰 부하를 줄 수 있다.</li>
  <li><strong>많은 NULL 결과</strong>: 오른쪽 테이블에서 일치하는 데이터가 거의 없어서, 대부분의 결과가 NULL인 경우. 이 경우 JOIN의 효율성이 떨어질 수 있다.</li>
  <li><strong>인덱스가 부족한 경우</strong>: 결합에 사용되는 키에 인덱스가 적절히 설정되지 않은 경우. 이는 성능 저하로 이어질 수 있다.</li>
</ul>

<h3 id="결론">결론</h3>

<ol>
  <li><strong>Multiple Query</strong>는 데이터 접근이 독립적이면서, 데이터베이스 부하를 분산시키고 병렬 처리가 가능할 때 효과적이다.</li>
  <li><strong>SubQuery</strong>는 단일 쿼리로 문제를 해결하고, 데이터베이스가 서브쿼리를 효율적으로 최적화할 수 있을 때 좋다. 그러나 큰 데이터셋이나 복잡한 연산이 포함될 때는 비효율적일 수 있다.</li>
  <li><strong>LEFT JOIN</strong>은 관계형 데이터베이스에서 최적화된 방식으로 모든 데이터를 포함하고 결합할 때 효율적이다. 하지만 큰 데이터셋 간의 결합이나, 인덱스가 부족한 경우에는 성능이 저하될 수 있다.
각각의 장단점이 분명한 거 같다. 사실 작성하면서도 와닿지가 않는 거 같다. 또한, 쉽게 비교할 수도 없다.</li>
</ol>

<p>데이터가 어떻게 분포되어있는지에 따라, 인덱싱에 따라, 클러스터링에 따라, 네트워크 지연율 등 너무 많은 변수가 존재하고, 상황에 따라 다르게 사용하는게 맞을것이라 생각된다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Prisma VS TypeORM</title><link href="/study/2024-08-21-Prisma-VS-TypeORM/" rel="alternate" type="text/html" title="Prisma VS TypeORM" /><published>2024-08-21T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/Prisma%20VS%20TypeORM</id><content type="html" xml:base="/study/2024-08-21-Prisma-VS-TypeORM/"><![CDATA[<hr />

<p>Nodejs에는 많은 ORM이 있다. 유래 깊은 Sequelize부터 Typescript가 등장한 시점에서 강타입의 ORM의 TypeORM, 그리고 최근 많은 호평을 받은 Prisma까지.</p>

<p>심지어 Prisma는 공식문서에서 Prisma가 다른 ORM보다 나은 이유를 설명하기까지 한다.(<a href="https://www.prisma.io/docs/orm/more/comparisons">링크</a>)</p>

<p>설명되어있는 이유들도 매력적이였지만, 성능에 관해서 얘기가 없었고 그래서 테스트해보기로 했다.</p>

<p>간단하게 테이블은 User(50,000 row), Company(3,774 row)이고 1:N 관계 지어져 있다.</p>

<p>추가로, id값들의 경우 인덱싱도 하였다.</p>

<h1 id="normal-query">Normal Query</h1>

<p>user테이블의 모든 값을 조회하는 쿼리이다.</p>

<h2 id="실행된-쿼리">실행된 쿼리</h2>

<h3 id="typeorm">TypeORM</h3>

<p>SELECT <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">id</code> AS <code class="language-plaintext highlighter-rouge">Users_id</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">name</code> AS <code class="language-plaintext highlighter-rouge">Users_name</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">gender</code> AS <code class="language-plaintext highlighter-rouge">Users_gender</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">created_date</code> AS <code class="language-plaintext highlighter-rouge">Users_created_date</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">updated_date</code> AS <code class="language-plaintext highlighter-rouge">Users_updated_date</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">company_id</code> AS <code class="language-plaintext highlighter-rouge">Users_company_id</code> FROM <code class="language-plaintext highlighter-rouge">users</code> <code class="language-plaintext highlighter-rouge">Users</code></p>

<h3 id="prisma">Prisma</h3>

<p>SELECT <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code>.<code class="language-plaintext highlighter-rouge">id</code>, <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code>.<code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code>.<code class="language-plaintext highlighter-rouge">gender</code>, <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code>.<code class="language-plaintext highlighter-rouge">created_date</code>, <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code>.<code class="language-plaintext highlighter-rouge">updated_date</code>, <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code>.<code class="language-plaintext highlighter-rouge">company_id</code> FROM <code class="language-plaintext highlighter-rouge">DongAJul</code>.<code class="language-plaintext highlighter-rouge">users</code> WHERE 1=1</p>

<h2 id="성능-비교">성능 비교</h2>

<p>TypeORM 10 사용자 / 10회</p>

<p><img src="/assets/img/Study/Prisma%20VS%20TypeORM-0.jpg" alt="image.jpg" /></p>

<p>Prisma 10 사용자 / 10회</p>

<p><img src="/assets/img/Study/Prisma%20VS%20TypeORM-1.jpg" alt="image.jpg" /></p>

<h2 id="차이점">차이점</h2>

<ol>
  <li>Prisma는 데이터베이스 명을 꼭 명시해줬다.</li>
  <li>TypeORM은 AS를 통해 Users라는 객체를 만들고자 하는게 느껴졌다.</li>
  <li>Prisma는 Where 1=1 을 추가해주었다.
    <ol>
      <li>Where 1=1을 추가하는 이유가 궁금했었는데, 찾아보니 추가로 and 조건이 붙어야 할때, 편하게 조건을 사용하기 위함이라고 한다. 디테일이… 기가 막히다..</li>
      <li>where절이 이미 있었는지 판단하고 없을때는 where을, 있을때는 and 조건을 붙여야 하는게 메모리의 낭비를 초래할 수 있다고 판단한 거 같다.</li>
    </ol>
  </li>
</ol>

<hr />

<h1 id="left-join-query">Left Join Query</h1>

<h2 id="실행된-쿼리-1">실행된 쿼리</h2>

<h3 id="typeorm-1">TypeORM</h3>

<ol>
  <li>SELECT <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">id</code> AS <code class="language-plaintext highlighter-rouge">Users_id</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">name</code> AS <code class="language-plaintext highlighter-rouge">Users_name</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">gender</code> AS <code class="language-plaintext highlighter-rouge">Users_gender</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">created_date</code> AS <code class="language-plaintext highlighter-rouge">Users_created_date</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">updated_date</code> AS <code class="language-plaintext highlighter-rouge">Users_updated_date</code>, <code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">company_id</code> AS <code class="language-plaintext highlighter-rouge">Users_company_id</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">id</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_id</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">name</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_name</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">address</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_address</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">longitude</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_longitude</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">latitude</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_latitude</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">scale</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_scale</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">big_job_kind_id</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_big_job_kind_id</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">mid_job_kind_id</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_mid_job_kind_id</code>, <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">small_job_kind_id</code> AS <code class="language-plaintext highlighter-rouge">Users__Users_company_small_job_kind_id</code> FROM <code class="language-plaintext highlighter-rouge">users</code> <code class="language-plaintext highlighter-rouge">Users</code> LEFT JOIN <code class="language-plaintext highlighter-rouge">company</code> <code class="language-plaintext highlighter-rouge">Users__Users_company</code> ON <code class="language-plaintext highlighter-rouge">Users__Users_company</code>.<code class="language-plaintext highlighter-rouge">id</code>=<code class="language-plaintext highlighter-rouge">Users</code>.<code class="language-plaintext highlighter-rouge">company_id</code></li>
</ol>

<h3 id="prisma-1">Prisma</h3>

<ol>
  <li>query SELECT <a href="http://dongajul.users.id/">DongAJul.users.id</a>, <a href="http://dongajul.users.name/">DongAJul.users.name</a>, DongAJul.users.gender, DongAJul.users.created_date, DongAJul.users.updated_date, DongAJul.users.company_id FROM DongAJul.users WHERE 1=1
→ companyId 받아오는 과정</li>
  <li>SELECT <a href="http://dongajul.company.id/">DongAJul.company.id</a>, <a href="http://dongajul.company.name/">DongAJul.company.name</a>, DongAJul.company.address, DongAJul.company.longitude, DongAJul.company.latitude, DongAJul.company.scale, DongAJul.company.big_job_kind_id, DongAJul.company.mid_job_kind_id, DongAJul.company.small_job_kind_id FROM DongAJul.company WHERE <a href="http://dongajul.company.id/">DongAJul.company.id</a> IN (?, ? …)
→ companyId 넣어서 돌리기</li>
</ol>

<h2 id="성능-비교-1">성능 비교</h2>

<h3 id="typeorm-2">TypeORM</h3>

<p>부하테스트 5사용자 / 5회</p>

<p><img src="/assets/img/Study/Prisma%20VS%20TypeORM-2.jpg" alt="image.jpg" /></p>

<p>스트레스테스트 10사용자 / 10회</p>

<p><img src="/assets/img/Study/Prisma%20VS%20TypeORM-3.jpg" alt="image.jpg" /></p>

<h3 id="prisma-2">Prisma</h3>

<p>부하테스트 5사용자 / 5회</p>

<p><img src="/assets/img/Study/Prisma%20VS%20TypeORM-4.jpg" alt="image.jpg" /></p>

<p>스트레스테스트 10사용자 / 10회</p>

<p><img src="/assets/img/Study/Prisma%20VS%20TypeORM-5.jpg" alt="image.jpg" /></p>

<h2 id="차이점-1">차이점</h2>

<p>굉장히 놀랄만한 수치의 차이를 보였다. 를 보였고,</p>

<ol>
  <li>TypeORM은 정직하게 LEFT JOIN을 사용한 반면 Prisma는 Join쿼리 없이 Where In을 이용한 두개의 쿼리문을 실행하였다.</li>
  <li>부하테스트에서도 약 33% 가량의 차이 발생(<strong>Prisma Win!</strong>)</li>
  <li>스트레스 테스트에서는 무려 45개의 조회를 더 버텨낸 뒤에 다운되어버렸다.(<strong>Again Prisma!</strong>)
물론, 되게 극단적인 예시를 들었다. 애초에 유저 50000명과 3774개의 회사가 모두 담긴 조회가 필요한 경우는 극히 드물다고 생각한다. 그렇지만 같은 ORM임에도 다른 쿼리를 실행시킨다는 점, 그리고 큰 성능 차이가 일어났다는 점이 충격적으로 느껴졌다.</li>
</ol>

<p>여기서 멈추면 안된다. 왜 Where In절이 Left Join보다 월등히 성능이 높았는지가 궁금해져 찾아볼 것이고, 아마 다음 글의 내용이 되지않을까 싶다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">DB migration</title><link href="/study/2024-05-23-DB-migration/" rel="alternate" type="text/html" title="DB migration" /><published>2024-05-23T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/DB%20migration</id><content type="html" xml:base="/study/2024-05-23-DB-migration/"><![CDATA[<hr />

<p>DB migration(MySQL → PostgreSQL)이 진행되며 일어난 Issue에 대해 회고한 게시글이다.</p>

<h1 id="motivation"><strong>Motivation</strong></h1>

<p>광생에서 개발을 진행하다가 슬픈 소식이 들려왔다.
Serverless SasS DB인 PlanetScale을 사용했는데, Hobby Plan이 종료된다는 소식이였다. 일시적인 종료가 아닌, 무료 플랜 자체를 지원하지 않는다고 한다.
MVP 1.0 단계에서 최소한의 비용으로 서비스를 검증받아야하는 상황이고, 당시 Client에 비해 Server의 소요는 충분했기에, DB migration을 진행하며 비용을 최소화 하기로 했다.</p>

<p>같은 SaaS 서비스인 Supabase를 사용하기로 하였다. 둘 다 같은 Serverless 기반 서비스라 개발자들이 개발에 집중할 수 있게 인프라에 대해 부담감을 덜어준다는 장점을 가지고 있다는게 큰 이유였다고 생각한다.</p>

<p>두 서비스의 차이점은 MySQL과 PostgreSQL이라는 점이다. 당시에 대표님이 이 작업에 소요를 물어보셨을 때, ORM이 적용되어 있던 애플리케이션이라 소요가 크지 않을 것이라 판단했다. 하지만…. 막상 그렇진 않았다..</p>

<h1 id="issue">Issue</h1>

<p>크게 세 가지의 이슈가 있었다.</p>

<ol>
  <li>Supabase의 TLS(CRT 파일)</li>
  <li>MySQL과 PostgreSQL의 기본적인 문법 차이</li>
  <li>PostgreSQL의 위·경도 거리 계산</li>
</ol>

<h2 id="supabase의-sslcrt-파일">Supabase의 SSL(CRT 파일)</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ssl</span><span class="p">:</span> <span class="p">{</span>
	<span class="nl">ca</span><span class="p">:</span> <span class="nf">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">src/global/config/certificate/supabase-ca.crt</span><span class="dl">'</span><span class="p">).</span><span class="nf">toString</span><span class="p">(),</span>
	<span class="nx">rejectUnauthorized</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">},</span>
</code></pre></div></div>

<p>Supabase는 애플리케이션에서 DB에 접속하는 과정에 꼭 crt를 검증하는 과정이 필요했다. 위의 방법대로 하면 작동한다. 하지만, gitignore(docker ignore)을 더 늘리고 싶지 않았다. 무차별적으로 늘리는 방식 자체가 협업하는 개발자들에게도 전부 전달해야하기 때문에 불편했다고 판단했다.</p>

<p>따라서 crt파일을 env로 관리하고자 하였는데, crt파일은 기본적으로 줄넘김문자가 있었고, 이 줄 넘김 문자를 env를 통해 configuration 시키는 작업에서 어려움을 겪었다.</p>

<p>갑자기 번뜩 떠오른 아이디어로 <strong>crt파일 자체를 base64로 인코딩하여 한 줄로 만들면서 env에 추가</strong>하였고, 별도의 파일 설치 없이 협업하는 개발자들에게 수정된 env파일을 공유하며 해당 이슈는 해결했다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">ssl</span><span class="p">:</span> <span class="p">{</span>
	<span class="c1">// Base64로 인코딩되어있는 CRT 디코딩</span>
	<span class="nl">ca</span><span class="p">:</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DATABASE_CRT</span><span class="p">,</span> <span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">).</span><span class="nf">toString</span><span class="p">(),</span>
	<span class="nx">rejectUnauthorized</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">},</span>
</code></pre></div></div>

<h2 id="mysql과-postgresql의-기본적인-문법-차이">MySQL과 PostgreSQL의 기본적인 문법 차이</h2>

<p>ORM을 통해 개발하는데 문법 차이가 무슨 소용이 있나? 라고 생각 들 수 있다. 나도 대표님이 물어봤을 땐 그렇게 생각했다.. 하지만 같은 RDBMS임에도 사소하게 문법의 차이가 존재했고, DB I/O를 줄이기 위해서 Query Builder를 통해 원하는 데이터를 한번에 가져오는 경우도 있었는데, 이런 QueryBuilder를 통한 SQL에서 오류가 발생했다. 주요 발생 원인은 나의 경우 다음과 같다.</p>

<ol>
  <li>IFNULL → COALESCE</li>
  <li>QueryBuiler Method이 Parameter를 미사용</li>
</ol>

<h3 id="ifnull--coalesce"><strong>IFNULL → COALESCE</strong></h3>

<p>이 문제는 진짜 기본적인 문법이 다른것에서 시작된 것이기에, 둘을 치환해주는 작업으로 쉽게 문제 해결이 가능했다.</p>

<h3 id="querybuiler-method이-parameter를-미사용"><strong>QueryBuiler Method이 Parameter를 미사용</strong></h3>

<p>골치덩이였다. 기존의 QueryBuilder는 다음과 같은 방식으로 사용했다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qb</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">entityManager</span>
    <span class="p">.</span><span class="nf">createQueryBuilder</span><span class="p">(</span><span class="nx">Store</span><span class="p">,</span> <span class="dl">"</span><span class="s2">s</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">leftJoinAndSelect</span><span class="p">(</span><span class="nx">Menu</span><span class="p">,</span> <span class="dl">"</span><span class="s2">m</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">s.id = m.store_id</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="dl">"</span><span class="s2">MAX(discount_rate) AS discount_rate</span><span class="dl">"</span><span class="p">)</span> <span class="c1">// Point 1</span>
    <span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="s2">`s.status = "</span><span class="p">${</span><span class="nx">StoreStatus</span><span class="p">.</span><span class="nx">OPEN</span><span class="p">}</span><span class="s2">"`</span><span class="p">);</span> <span class="c1">// Point 2</span>
</code></pre></div></div>

<p>select에서 AS를 위와 같은 방식으로 사용해왔고, where절을 가끔 백틱을 포함해 변수를 넣었다.</p>

<p><img src="/assets/img/Study/DB%20migration-0.jpg" alt="image.jpg" /></p>

<p><img src="/assets/img/Study/DB%20migration-1.jpg" alt="image.jpg" /></p>

<p>Optional이긴 하지만 select의 selectionAliasName과 where의 parameters를 볼 수 있다.</p>

<p>저걸 사용하지 않고 string을 통해 모든 것을 해결하려 했는데… 문제가 발생했던 것이다.. 심지어 저런 방식으로 작성된 코드의 양이 꽤 됐었다. 이 부분은 노가다로 해결했고,</p>

<p><strong>method를 그냥 사용하는 것이 아닌, 한번 더 parameter 값을 확인하는 습관을 가지게 된 거 같다.</strong></p>

<p>지금 생각해보면… 그렇게 짰던 이유가 궁금하긴 하다..</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">qb</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">entityManager</span>
    <span class="p">.</span><span class="nf">createQueryBuilder</span><span class="p">(</span><span class="nx">Store</span><span class="p">,</span> <span class="dl">"</span><span class="s2">s</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">leftJoinAndSelect</span><span class="p">(</span><span class="nx">Menu</span><span class="p">,</span> <span class="dl">"</span><span class="s2">m</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">s.id = m.store_id</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="dl">"</span><span class="s2">MAX(discount_rate)</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">discount_rate</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="dl">"</span><span class="s2">s.status = :storeStatus</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span><span class="na">storeStatus</span><span class="p">:</span> <span class="nx">StoreStatus</span><span class="p">.</span><span class="nx">OPEN</span><span class="p">});</span>
</code></pre></div></div>

<h2 id="postgresql의-위경도-거리-계산">PostgreSQL의 위·경도 거리 계산</h2>

<p>광생에는 사용자와 가게의 픽업시간을 계산하기 위해 위·경도를 통해 거리를 계산해야한다.</p>

<p>MySQL에는 기본적으로 거리를 계산하는 함수인 ST_Distance_Sphere와, 위경도를 점으로 표현하는 POINT를 통해 쉽게 거리를 계산하고, 조건문을 걸 수 있었다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ST_Distance_Sphere</span><span class="p">(</span><span class="n">POINT</span><span class="p">(</span><span class="n">storeLon</span><span class="p">,</span> <span class="n">storeLat</span><span class="p">),</span> <span class="n">POINT</span><span class="p">(</span><span class="n">userLon</span><span class="p">,</span> <span class="n">userLat</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">:</span><span class="k">range</span> <span class="c1">-- MySQL</span>
</code></pre></div></div>

<p>PostgreSQL도 있다. 근데, 기본적으로 지원하지 않는다.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ST_DWithin</span><span class="p">(</span><span class="n">ST_SetSRID</span><span class="p">(</span><span class="n">ST_MakePoint</span><span class="p">(</span><span class="n">storeLon</span><span class="p">,</span> <span class="n">storeLat</span><span class="p">),</span> <span class="mi">4326</span><span class="p">),</span> <span class="n">ST_SetSRID</span><span class="p">(</span><span class="n">ST_MakePoint</span><span class="p">(</span><span class="n">userLon</span><span class="p">,</span> <span class="n">userLat</span><span class="p">),</span> <span class="mi">4326</span><span class="p">),</span> <span class="p">:</span><span class="k">range</span><span class="p">)</span> <span class="c1">-- PostgreSQL</span>
</code></pre></div></div>

<p>하지만, 그냥 단순하게 바꿀 수 있지 않았다. 지리 객체에 대한 지원을 추가하는 오픈 소스인 Postgis Extension이 필요하였고, Supabase에서는 extension을 쉽게 설치할 수 있어서 prod, stage 둘 다 무사히 설치를 완료했다. 하지만, Docker로 이뤄진 개발 환경에서는 extension의 설치가 쉽지 않았다.</p>

<ol>
  <li>Docker파일이 실행될 때 자동으로 extension을 설치하는 SQL을 실행
이 방법을 제일 먼저 시도했다. 하지만, Supabase에서 지원하는 PostgreSQL버전와 일치하며, Supabase에서 지원하는 Postgis를 설치하는 SQL에서 오류가 계속 발생했다.</li>
  <li>울며 겨자먹기로 Docker 환경 자체를 Postgis를 지원하는 이미지를 빌드하는 방법을 시도했다.</li>
</ol>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">:</span>
    <span class="n">ks_db</span><span class="p">:</span>
        <span class="n">image</span><span class="p">:</span> <span class="n">postgis</span><span class="o">/</span><span class="n">postgis</span><span class="p">:</span><span class="mi">15</span><span class="o">-</span><span class="mi">3</span><span class="p">.</span><span class="mi">4</span>
        <span class="k">restart</span><span class="p">:</span> <span class="n">always</span>
        <span class="n">container_name</span><span class="p">:</span> <span class="n">db</span>
        <span class="n">environment</span><span class="p">:</span>
            <span class="n">POSTGRES_USER</span><span class="p">:</span> <span class="err">$</span><span class="p">{</span><span class="n">DATABASE_USERNAME</span><span class="p">}</span>
            <span class="n">POSTGRES_PASSWORD</span><span class="p">:</span> <span class="err">$</span><span class="p">{</span><span class="n">DATABASE_PASSWORD</span><span class="p">}</span>
            <span class="n">POSTGRES_DB</span><span class="p">:</span> <span class="err">$</span><span class="p">{</span><span class="n">DATABASE_NAME</span><span class="p">}</span>
            <span class="n">TZ</span><span class="p">:</span> <span class="n">Asia</span><span class="o">/</span><span class="n">Seoul</span>
        <span class="n">healthcheck</span><span class="p">:</span>
            <span class="n">test</span><span class="p">:</span> <span class="p">[</span><span class="s1">'CMD'</span><span class="p">,</span> <span class="s1">'pg_isready'</span><span class="p">,</span> <span class="s1">'-U'</span><span class="p">,</span> <span class="s1">'postgres'</span><span class="p">]</span>
            <span class="n">timeout</span><span class="p">:</span> <span class="mi">20</span><span class="n">s</span>
            <span class="n">retries</span><span class="p">:</span> <span class="mi">10</span>
        <span class="n">ports</span><span class="p">:</span>
            <span class="o">-</span> <span class="err">$</span><span class="p">{</span><span class="n">DATABASE_PORT</span><span class="p">}:</span><span class="err">$</span><span class="p">{</span><span class="n">DATABASE_PORT</span><span class="p">}</span>
        <span class="n">networks</span><span class="p">:</span>
            <span class="o">-</span> <span class="k">local</span><span class="o">-</span><span class="n">network</span>
<span class="n">volumes</span><span class="p">:</span>
    <span class="n">db</span><span class="p">:</span>
<span class="n">networks</span><span class="p">:</span>
    <span class="k">local</span><span class="o">-</span><span class="n">network</span><span class="p">:</span>
        <span class="n">driver</span><span class="p">:</span> <span class="n">bridge</span>
</code></pre></div></div>

<p>1번으로 정말 많이 헤맸는데, 무색해지게끔 이 시도로 바로 성공했다. 심지어 Supabase에서 지원하는 PostgreSQL, Postgis의 버전과 완벽히 일치하여 prod환경과 똑같은 DB환경을 만들 수 있었다.</p>

<p>환경 세팅을 마친 후, 위에서 서술한 거리 계산함수는 문제 없이 작동했고, 해결했다.</p>

<h1 id="realization"><strong>Realization</strong></h1>

<p>지나고 봤을땐, 좋은 경험해봤다고 밖에 생각이 안 든다.</p>

<p>사이드프로젝트에서 DB migration이 이뤄질 일이 있을까? → 어차피 곧 끝날텐데 돈 몇푼 내고 말지!
그렇다고 실무에서 DB migration은 자주 일어나는 일일까? → 리소스가 너무 큰 작업…. 시도하기 어렵다..</p>

<p>라고 생각된다.</p>

<p>당시 진행하면서 대표님께 죄송했다. 지식이 부족함에도 코스트를 너무 쉽게 산정했고, 원래 계획했던 기간을 초과해서 작업을 마쳤다.</p>

<p>“아 이거 얼마면 돼요~”라는 뉘앙스는 좋지 않은 거 같다. 작업의 코스트를 산정할 때 좀 더 조심스럽게 생각해야겠다.
<del>“3분 아니면 3주가 걸릴 거 같은데요..?”</del></p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Automate deployment</title><link href="/study/2024-03-22-Automate-deployment/" rel="alternate" type="text/html" title="Automate deployment" /><published>2024-03-22T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/Automate%20deployment</id><content type="html" xml:base="/study/2024-03-22-Automate-deployment/"><![CDATA[<hr />

<p>개발을 하다보니, 새로운 기능을 구현할때마다 ec2에 ssh접속해서 git pull당겨오고 서버를 재시작하는 절차가 너무 귀찮다고 느꼈다. 그래서 CI/CD까진 아니여도 배포 자동화를 구현하면 편하겠다 생각했고, 그래서 배포 자동화 과정에 대해 글을 작성해보려 한다.</p>

<h3 id="cicd란">CI/CD란?</h3>

<p><img src="/assets/img/Study/donga-deploy1.png" alt="Untitled" /></p>

<p>CI는 지속적 통합(Continuous Integration)개발자를 위해 빌드와 테스트를 자동화하는 과정이고,</p>

<p>CD는 지속적 제공(continuous delivery)이라는 의미와 지속적배포(continuous deployment)라는 의미를 모두 가지면서 최종적으로 프로덕션 환경에 자동으로 배포하는 역할을 한다.</p>

<p>위의 과정을 모두 거친게 CI/CD라고 할 수 있고, 내가 CI/CD 환경을 구축하지 못한 이유는 CI부분과 같다. 사실 테스트코드가 아직 없고, 그냥 Github Action을 통한 리포지터리 자동 병합 및 프로덕션 환경에 자동으로 배포 과정만 있기 때문이다. 테스트코드가 있었으면 좋았겠지만,, 졸업작품의 특성상 시간에 쫓겨서 하는경우가 너무 많아 테스트코드까지는 짜지 못했다. ㅠ</p>

<h3 id="배포-자동화-과정">배포 자동화 과정</h3>

<p><img src="/assets/img/Study/donga-deploy2.png" alt="Untitled" /></p>

<p>위 사진과 같은 구성으로 진행된다.</p>

<ol>
  <li>main branch에 merge되거나 main에서 git push한 경우, Github Action이 실행된다.</li>
  <li>Github Action 인스턴스에서 미리 설정해둔 pemkey의 값과 ssh명령어로 production ec2에 접속한다.</li>
  <li>git pull, npx prsima generate 명령어를 통해 배포서버의 코드 변경사항을 추가한다.</li>
  <li>pm2에 watch옵션을 걸어둔 스크립트가 변경사항을 추적하고 서버를 재가동한다.</li>
</ol>

<p>아래는 위의 과정을 실행하는 Github Action yml파일이다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Deploy to EC2</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">push</span><span class="pi">:</span>
    <span class="na">branches</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">main</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">deploy</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Checkout repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install Node.js using nvm</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">export NVM_DIR="$HOME/.nvm"</span>
          <span class="s">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh"  # This loads nvm</span>
          <span class="s">nvm install 16.13.2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Install SSH key</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">mkdir -p ~/.ssh</span>
          <span class="s">echo "$" &gt; ~/.ssh/donga.pem</span>
          <span class="s">chmod 600 ~/.ssh/donga.pem</span>
          <span class="s">ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span>
          <span class="s">ssh-keyscan -t rsa ec2-12-345-678-910.ap-northeast-2.compute.amazonaws.com &gt;&gt; ~/.ssh/known_hosts</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">SSH into EC2 and pull changes ssh 접속 + git pull</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">ssh -i ~/.ssh/donga.pem ubuntu@ec2-12-345-678-910.ap-northeast-2.compute.amazonaws.com "cd ~/server &amp;&amp; git restore . &amp;&amp; git pull origin main"</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">npm install 버전 동기화</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">npm install</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">prsima generate(mysql)</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">npm run generate:mysql</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">prsima generate(mongo)</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">npm run generate:mongo</span>

</code></pre></div></div>

<p>진짜 정말 확실히 느낀게 있다. 배포 자동화를 구현하는데 계속 사소한 에러가 나기도 했고, 공부할 것도 있었다. 저 짧은 yml파일을 만들고 성공적으로 배포 자동화를 구축하는데 5시간정도는 걸린 거 같다.</p>

<p>근데, 이 배포 자동화를 만든 후 절약한 시간은 5시간을 벌써 웃돈거같다. 프론트에서 로깅을 요청한 상황이 아니면 내가 ssh로 ec2를 접속하는 일도 없고, 여러모로 번거로운게 많이 줄어든 거 같다.</p>

<p>Back-End가 나 혼자임에도 불구하고 이런 시간 절약을 이뤄냈는데, 팀에서 배포 자동화를 구축하여 팀원들도 사용한다면 많은 시간을 절약할 수 있을거란 생각이 든다.</p>

<p>그리고 꼭 <strong>배포 자동화 뿐 아닌 CI/CD</strong>도 구축해보고 싶다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">광생 Menu Orders Sequence Diagram</title><link href="/study/2024-03-15-%EA%B4%91%EC%83%9D-Menu-Orders-Sequence-Diagram/" rel="alternate" type="text/html" title="광생 Menu Orders Sequence Diagram" /><published>2024-03-15T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/%EA%B4%91%EC%83%9D%20Menu%20Orders%20Sequence%20Diagram</id><content type="html" xml:base="/study/2024-03-15-%EA%B4%91%EC%83%9D-Menu-Orders-Sequence-Diagram/"><![CDATA[<hr />

<p>노션쓰다보니.. 노션이 편해서 자꾸 블로그에 정리를 안한다 <del>(github 블로그가 사실 쓰는게 좀 귀찮긴 하다)</del></p>

<p>광생에서 개발하다가 menu들의 order을 관리하는 부분을 맡았는데, 이게 백엔드 개발자들끼리 많이 얘기하다가 결국 내가 맡게 되어 내가 개발했다. 
개발한 뒤, 팀원들의 이해를 돕기 위해 Sequence Diagram을 제작하여 문서화를 진행하였다. 내용은 아래와 같다.</p>

<h3 id="작동방식">작동방식</h3>

<ul>
  <li>menu의 order컬럼을 두고, 그 order를 이용해서 구현하는 대신, store_detail에 menuOrder컬럼(배열을 문자열로 변환한 것)을 두고 이용</li>
  <li>따라서, 메뉴 추가나 메뉴 순서 변경, 메뉴 품절처리 등 순서가 변경될 수 있는 곳에서
store_detail의 문자열만 변경 가능</li>
</ul>

<h3 id="동기">동기</h3>

<ul>
  <li>드래그 방식으로 변경되는 메뉴 순서는 각각의 menu마다 order컬럼을 둔다면,
무수히 많고 복잡한 update문이 작성되리라 예상</li>
</ul>

<h2 id="sequence-diagram-link">Sequence Diagram (<a href="https://excalidraw.com/#json=fBGp43_9Z20vUQ5eBsxz3,jh1MQb5ZU5H4n7QFpqGN5g">Link</a>)</h2>

<h3 id="점주">점주</h3>

<p><img src="/assets/img/Study/sequence1.png" alt="Untitled" /></p>

<h3 id="유저">유저</h3>

<p><img src="/assets/img/Study/sequence2.png" alt="Untitled" /></p>

<p>확실히 위와 같이 그림으로 표현하게 되면 한 눈에 보기 좋은 거 같다. Sequence Diagram을 자주 이용하도록 습관들이는 것도 좋을 거 같다는 생각이 든다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">광생 회고록</title><link href="/project/%EA%B4%91%EC%83%9D/2024-01-30-realization/" rel="alternate" type="text/html" title="광생 회고록" /><published>2024-01-30T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/project/%EA%B4%91%EC%83%9D/realization</id><content type="html" xml:base="/project/%EA%B4%91%EC%83%9D/2024-01-30-realization/"><![CDATA[<hr />

<h2 id="광생"><a href="https://kwangsaeng.my.canva.site/">광생</a></h2>

<p><strong><em>더 이상 떨이상품 소리치지않고 파세요. 친환경적 음식 유통 플랫폼</em></strong></p>

<h3 id="어려웠던-점">어려웠던 점</h3>

<p>확장성을 고려하여 DB를 구축하니 테이블이 많아져 개발 도중에 구조가 헷갈릴때가 많았음.</p>

<p>다른 백엔드 개발자와 협업하는 과정에서 가독성을 올리기위해 코드 스타일을 맞춰가는건 만만히 볼 작업이 아니다.</p>

<h3 id="배운점">배운점</h3>

<p>나를 가장 많이 성장시킨 프로젝트.
지금의 가치관에 밑받침이 된 우물 안의 개구리라는 고사성어를 처음 느끼게 해준 고마운 프로젝트이다.
가뭄에 콩 나듯 있는 Node.js 4명의 백엔드 개발자 오고 갔고, 그렇기에 관점을 넓힐 수 있었다.</p>

<p>Slack, Confluence, Zira, Notion 등 다양한 툴을 사용하며 협업하는 동안, <strong>소프트스킬</strong>의 중요성을 다시금 깨달았다.</p>

<p>Git-flow 전략과 Commit Convention, Code Convention을 통해 새로운 팀원이 합류하여도 쉽게 온보딩할 수 있는 체계를 구축했다.</p>

<p>객체지향프로그래밍을 통해 <strong>효율적인 코드란 무엇일까</strong> 끊임없이 생각하게 되었다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="project" /><category term="광생" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">private VS private readonly</title><link href="/study/2024-01-29-Private-VS-Private-readonly/" rel="alternate" type="text/html" title="private VS private readonly" /><published>2024-01-29T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/Private%20VS%20Private%20readonly</id><content type="html" xml:base="/study/2024-01-29-Private-VS-Private-readonly/"><![CDATA[<hr />

<p>요즘 nestjs를 사용하다보면 OOP의 개념이 부족한 탓인지 계속 의구심을 갖게 된다. 군대가기전에 자바 수업 좀 집중해서 들을걸… 코로나라고 동영상강의니까 언제든 보면 다시 보면 되겠지라고 대충 듣고 넘기지 말걸……..</p>

<p>후회해서 얻는것은 없다. 지금부터라도 잘 정리하고 다신 안 잊어버리면 된다.</p>

<p>제목에서 보다싶이 nestjs에서 의존성 주입하는 과정 중 constructor안에 private을 쓸 때도 있고, private readonly를 쓸 때도 있어서 좀 여러군데를 찾아보다가 깨달은 점을 정리해보려고 한다.</p>

<p><a href="https://velog.io/@kwaktaemin_/JS-private-private-readonly">https://velog.io/@kwaktaemin_/JS-private-private-readonly</a></p>

<p>위의 nodejs개발자분이 정리한것을 봤는데, 이 예시를 보고서도 좀 이해가 안돼 TS컴파일러에 이것저것 끄적여보다가 깨우쳤다.</p>

<p>우선 의존성 주입 차원에서 말고, 객체지향프로그래밍 관점에서 둘을 비교해보자.</p>

<h3 id="private">private</h3>

<p><img src="/assets/img/Study/private.png" alt="Untitled" /></p>

<p>좀 더 에러를 직관적으로 살펴보기 위해 vscode를 캡쳐해보았다.</p>

<p>간단하게 class안에 private 변수를 선언해두고, get set 메소드를 만들어 두었다. 그리고 그 밖 환경에서 인스턴스를 생성해 이리저리 조작해보았다.</p>

<p>메소드를 통해 privateVariable 변수를 접근하면 읽기와 수정 모두 예상한대로 작동하는 것을 볼 수 있다. 
하지만, class 외부에선 읽기와 수정 모두 불가능하여 캡슐화를 통해 은닉화가 진행된것을 확인할 수 있었다.</p>

<h3 id="private-readonly">private readonly</h3>

<p><img src="/assets/img/Study/private_readonly.png" alt="Untitled" /></p>

<p>그에 반해 readonly까지 붙인건 당연하게도 set메소드 즉, 수정이 불가능한 것을 확인할 수 있다.
추가로 private 예시와 같이 private로 선언된것이기 때문에 클래스 외부에선 접근이 불가능하다.</p>

<h3 id="nestjs에서는">Nestjs에서는?</h3>

<p>본론으로 돌아와, Nestjs에서 의존성주입을 진행할땐 둘을 어떻게 알맞게 사용해야하는지 살펴보았다.
결국, private readonly가 아닌 private만을 사용하는것은, 그 class안에서 선언한 무언가가 변경될 여지가 있다는 것이다. 그럼 예를 들어 서비스 레이어에서 가변성인 의존성이란게 존재할까?</p>

<p>찾아보니 간혹 그런 경우가 존재한다고 하긴 한다.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">Injectable</span><span class="p">()</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nc">DatabaseService</span> <span class="p">{</span>
    <span class="kr">private</span> <span class="nx">database</span><span class="p">:</span> <span class="nx">any</span><span class="p">;</span>

    <span class="nf">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">readonly</span> <span class="nx">configService</span><span class="p">:</span> <span class="nx">ConfigService</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">if </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">configService</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">ENVIRONMENT</span><span class="dl">'</span><span class="p">)</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">development</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">database</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LocalDatabaseService</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">database</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CloudDatabaseService</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 기타 메소드들...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 configuration 작업의 경우, 동적으로 의존성을 부여받아 DB를 접근하는 방법도 존재한다.</p>

<p>하지만 이렇듯 의존성이 변경된다면 유연해지고, 이런 유연함은 코드의 복잡성을 증가시키는 잘못된 구조라고 생각되기때문에 app.module에서 config옵션을 주어 다른 방식의 동적 접근도 가능하니, 그렇게 하도록 습관화해야겠다는 생각이 든다.</p>

<h1>💡</h1>

<p>사실 이해한 지금으로는 이걸 왜 몰랐지 생각이 들긴 하는데, 원래 개발이란게 그런 거 같다. 한번 이해하고서 뒤를 돌아보면 삽질을 계속 하고 있던 경험이 많다.
하지만 삽질끝에 <strong>분명한 달콤함</strong>도 있기 때문에 개발이 재밌는 거 같다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">DongA 회고록</title><link href="/project/donga/2024-01-28-realization/" rel="alternate" type="text/html" title="DongA 회고록" /><published>2024-01-28T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/project/donga/realization</id><content type="html" xml:base="/project/donga/2024-01-28-realization/"><![CDATA[<hr />

<h2 id="donga"><a href="https://github.com/Friends-across-the-street/server">DongA</a></h2>

<p><strong><em>후배님, 저 믿고 줄 잡아보실래요? 취업 과외 플랫폼</em></strong></p>

<h3 id="어려웠던-점">어려웠던 점</h3>

<p>HTTP 프로토콜이 아닌 Socket 통신방법을 처음 사용해보는 과정이 익숙하지 않아 어려웠다.</p>

<p>ORM으로 Prisma를 사용했는데, Sequelize나 TypeORM과는 사용 방식이 달라 낯설었다.</p>

<h3 id="배운점">배운점</h3>

<p>Nestjs를 사용해 <strong>아키텍쳐</strong>를 구성하는 방법에 대해서 많은 고민을 하였고, 효율적인 방법이 생각날때마다 주저없이 리팩토링하는 습관 들였다.</p>

<p>하지만,, <strong>테스트코드</strong>를 작성하지 않으면 리팩토링이 꺼려진다는 것을 새삼 느꼈다.</p>

<p>API 명세서를 작성하지 않고 개발에 들어가면 수정 소요가 많이 발생한다는 것을 알게 되었다.</p>

<p><strong>무중단배포</strong>를 붙여두면 많은 작업 소요를 줄일 수 있다는것을 깨달았다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="project" /><category term="DongA" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Why Typescript?</title><link href="/study/2024-01-19-Why-TypeScript/" rel="alternate" type="text/html" title="Why Typescript?" /><published>2024-01-19T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/Why%20TypeScript</id><content type="html" xml:base="/study/2024-01-19-Why-TypeScript/"><![CDATA[<hr />

<p>글을 열심히 써보고자 했지만,, 프로젝트 일정이 너무 빡빡해서 블로그글을 작성하는게 쉽지않았다. 그래도 틈틈히 시간날때 작성하려고 노력중이다..</p>

<p>지금 좀 빡빡한 일정이 끝나서 숨을 한번 돌릴겸 Typescript를 왜 쓰는지, 그리고 어떻게 잘 사용할 수 있는지에 대해 작성해보려고 한다.</p>

<p>프로젝트 자체가 nestjs다 보니 계속 typescript를 사용해왔다. 근데 이걸 그냥 의무적으로 사용하는 느낌이 들기 시작했고, 의무적으로 코드를 작성하다보면 뭔가 놓치는게 분명히 있으리라 생각이 들었다. 분명 제대로 사용도 못하고 있었을거다. 그러니 다시 한번 정리해보고, 잘 써보려 한다.</p>

<h2 id="why"><strong>Why?</strong></h2>

<p>브라우저는 타입스크립트를 이해하지 못한다. 그러므로 타입스크립트로 작성된 코드는 브라우저에서 해석될때, 자바스크립트로 컴파일 되는 과정을 한번 더 거쳐야한다. 그러면 “엥? 왜 굳이굳이 타입스크립트로 개발하나요? 하나 더 돌아가나요? 자바스크립트가 더 좋은거 아닌가요?”란 생각이 든다.</p>

<p>근데 타입스크립트를 도입하지 않았을때 <strong>javascript</strong>만의 문제점이 발생한다. 아래의 코드를 확인해보자.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// javascript</span>
<span class="kd">function</span> <span class="nf">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">add</span><span class="p">();</span> <span class="c1">// NaN</span>
<span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// NaN</span>
<span class="nf">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span> <span class="c1">// 3</span>
<span class="nf">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// 7</span>
<span class="nf">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// helloworld</span>
</code></pre></div></div>

<p>간단하게 숫자 두개를 받아 그 두개의 합을 로그찍는 add 함수를 선언했다. 그 후, add함수를 여러 파라미터로 호출해봤을때 우측의 결과값들을 주석으로 달아놨다.</p>

<p>add함수는 두개의 숫자 arg가 필요하지만, 함수를 호출할때 파라미터를 넣지않거나, 한개의 파라미터를 넣어도 실행이 된다. 그리고 세개의 파라미터를 넣었을땐, 모두를 다 합하는 것이 아닌 첫번째와 두번째 인자값만 합하여 출력한 것을 확인할 수 있다.
마지막 예시에선 숫자가 아님에도 잘 합쳐온것도 보인다.
다른 개발자가 파라미터를 3, 4, 5 넣었을때 예측하는 값은 7일수도 있지만, 대부분은 12가 나올것으로 예상할 것이다. 또한, 숫자가 아닌 “hello”, “world”를 넣었을때는 오류가 발생하는게 맞아보인다.</p>

<p>추가로 코드를 확인해보자.</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// javascript</span>
<span class="kd">function</span> <span class="nf">showItems</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">arr</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
<span class="nf">showItems</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]);</span> <span class="c1">// 1 \n 2 \n 3</span>
<span class="nf">showItems</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// Uncaught TypeError: arr.forEach~</span>
</code></pre></div></div>

<p>위 코드 또한 자바스크립트로 array를 받아, 그 요소들을 콘솔로 찍어내는 코드이다.</p>

<p>showItems에 배열을 넣었을때는 순서대로 잘 찍힌 것을 확인할 수 있지만, 그 아래처럼 1, 2, 3을 넣었을땐 TypeError가 발생하는 것을 확인할 수 있다. 이 타입 에러는 코드를 실행했을때, 즉 런타임에 발생한다.</p>

<p><strong>Javascript는 동적언어로 런타임에 타입을 결정하고 오류가 있다면 뱉어내는 구조를 가지고 있다.
그에 반해 Java나 Typescript같은 정적언어는 컴파일 타임에 타입을 결정하고 오류를 발견한다.</strong></p>

<p><strong>정적언어가 코드를 작성할 땐 더 오래걸릴 수 있지만, 안정성을 더 확보할 수 있는 방법인것은 분명하다.</strong></p>

<p>그럼 위의 코드를 <strong>Typescript</strong>에서 작성해보자. markdown의 코드블럭에선 별 다른 문제가 안 느껴져서 사진을 가져와봤다.</p>

<p><img src="/assets/img/Study/ts%200.png" alt="Untitled" /></p>

<p>심지어 파라미터에 마우스를 가져다대면 다음과 같이 나온다.</p>

<p><img src="/assets/img/Study/ts%201.png" alt="Untitled" /></p>

<p>실행시키지않아도 컴파일 과정에서 바로 오류를 발견했고, num1과 num2의 …이 우리를 불안에 떨게 만든다.</p>

<p>위에서의 any형식이란, 아무 타입이나 다 받아올 수 있다는 뜻이다. 하지만 개발을할때 숫자를 더하는 add함수에서 문자열 두개를 넣어 붙이는건 굉장히 위험한 사고라고 생각한다. 
함수에는 명확하게 의미가 부여되어 있는게 좋고, 한가지 일만을 하는게 좋기때문에, any가 아닌 number로 타입지정 해주는게 좋다.</p>

<p><img src="/assets/img/Study/ts%202.png" alt="Untitled" /></p>

<p>number을 붙여주니 맨 밑에 hello world도 오류가 발생하는것을 확인할 수 있다. 
<strong>결론적으론, add를 정확하게 사용하고 있는 경우를 제외하곤 모든 상황에서 에러가 발생한다. 기뻐할 일이다.</strong></p>

<p>참고로 add함수 파라미터 옆 :void는 이 함수의 리턴값을 타입을 지정해주는것인데, console.log만 진행하고 return 해주는것은 없기때문에 void타입이라고 지정한다. 아직까진 제외해줘도 무방하다.</p>

<p>마찬가지로 showItems함수를 타입스크립트에서 살펴보자.</p>

<p><img src="/assets/img/Study/ts%203.png" alt="Untitled" /></p>

<p>정확히 사용할때가 아니라면 컴파일 과정에서 이미 오류가 발생하고, 파라미터와 callback함수의 item에서도 … 표시가 발생한것을 볼 수 있다. 위의 add함수와 동일하게 any타입이라서 불안에 떨고 있단 표시를 나타낸다.</p>

<p><img src="/assets/img/Study/ts%204.png" alt="Untitled" /></p>

<p>타입스크립트로 변경 후, 하나의 예시를 추가했다. 배열에 숫자긴하지만, 문자열형태의 숫자를 넣어봤을때도 showItems함수에선 숫자형태의 배열만 받기때문에 오류가 발생하는것을 확인할 수 있다. 
추가로 item의 …은 별도로 정의해주지 않았음에도 사라진것을 확인할 수 있는데, 이는 arr를 숫자형태의 배열로 선언해준 상태에서 forEach문을 돌때 arr의 각각의 요소들은 number인 것을 알고 있기 떄문이다. 
원한다면 item: number로 써주어도 좋다.</p>

<hr />

<p>타입스크립트는 자바스크립트의 치명적 단점인 <strong>타입안정성을 보완</strong>했다. 이로 인해 굳이굳이 코드를 실행시키지않아도, 개발도중에 오류를 발견해 수정하기 쉽고, 쉽게 예상하지 못했던 오류에 대해서도 발견할 수 있다.</p>

<p>사실 나도 의무적으로 타입스크립트를 사용했지만, 이젠 타입스크립트 아니면 개발이 너무 불편할거란 생각이 든다.</p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">학술제 발표</title><link href="/study/2023-12-01-%ED%95%99%EC%88%A0%EC%A0%9C-%EB%B0%9C%ED%91%9C/" rel="alternate" type="text/html" title="학술제 발표" /><published>2023-12-01T00:00:00+00:00</published><updated>2024-08-28T21:51:19+00:00</updated><id>/study/%ED%95%99%EC%88%A0%EC%A0%9C%20%EB%B0%9C%ED%91%9C</id><content type="html" xml:base="/study/2023-12-01-%ED%95%99%EC%88%A0%EC%A0%9C-%EB%B0%9C%ED%91%9C/"><![CDATA[<hr />

<p><img src="/assets/img/Study/%ED%95%99%EC%88%A0%EC%A0%9C%20%EB%B0%9C%ED%91%9C-0.jpg" alt="image.jpg" /></p>

<p><del>간지나는 Git CLI라고 써냈지만,, CLI 별로 안쓴건 안비밀</del></p>

<p>우연한 기회로 교내 학술제에 발표자로 참여할 기회가 있었다. 같이 발표한 두분의 발표자보다 실력이 한참 뒤떨어진다고 생각하는데, 그래도 누군가에게 쉽게 이해시키는건 누구보다 자신있어서 불렀다고 생각한다.</p>

<h3 id="주제-선정">주제 선정</h3>

<p>어떤 주제로 발표를 해야할지 고민을 많이 했다. 발표는 항상 듣는 대상을 기준으로 주제를 선정해야한다고 생각했는데, 1 ~ 3학년까지 다양한 학년의 후배들이라 더 고민됐던 거 같다.</p>

<p>내용이 쉬워 모두가 이해할 수 있으며, 개발 경험이 있는 사람에게도 리마인드 해주면 좋은게 뭐가 있을까 고민하다가 Git에 대해 강의를 하기로 결정했다.</p>

<p>개발 경험이 있더라도 맨날 까먹는 Git flow를 다시 설명하는게 좋을 거라고 생각들었고, 경험이 없는 사람에게는 언젠가 꼭 버전 관리 시스템은 사용하기에 선정했다.</p>

<h3 id="설명">설명</h3>

<p>버전 관리 시스템을 쉽게 설명하기 위해 쯔꾸르 게임을 예시로 들었다. 또래 친구중에 아오오니 모르는 친구는 없다고 생각했다 ㅎㅎㅎ…</p>

<p><img src="/assets/img/Study/%ED%95%99%EC%88%A0%EC%A0%9C%20%EB%B0%9C%ED%91%9C-1.jpg" alt="image.jpg" /></p>

<p>아오오니를 플레이하는 영상을 보다보면, 분명 위 사진과 같이 파일을 여러군데 나눠서 저장하는 것을 볼 수 있다.
어떤 상황으로든 돌아갈 수 있어야하기 때문이다. 만약 제일 최근에 저장한 파일 3번이 아예 돌이킬 수 없는 길을 들어와서 답이 없을경우 그 이전인 파일 2번으로 돌아가야한다. 이처럼 게임에서도 한개의 파일에서 덮어씌우며 저장하는 일은 되도록 피한다.</p>

<p>Git도 마찬가지라고 생각한다. 제일 최근에 세이브한 코드가 정답이냐고 물어본다면,,, 자신있게 100% 정답이라고 얘기할 자신이 없다. 그렇기에 여러개로 나눠서 저장한다. 언제든 돌아갈 수 있어야한다.. 회귀해야한다..</p>

<h3 id="피드백">피드백</h3>

<p><del>PPT에 적혀있는 글자 크기가 너무 작아요.</del></p>

<p>앗차차,, 학생회장으로서 누군가의 앞에서서 얘기하는 것에 대해 좀 익숙하다고 생각했었다.</p>

<p>근데 절대…….아니다…. 발표자로서 누군가의 앞에서 지식을 공유한다는 것은 다른 긴장감이였다고 생각들었다. 물론 학생회장도 책임감을 느껴지만, 지식을 공유하는 사람으로서 느끼는 책임감은 처음이었다.</p>

<p>아마, “나조차도 내가 발표하고 있는 내용이 자신 없었다.”에 관해서도 원인이 있었던 거 같다. 발표함으로써 이걸 느꼈다는게 참 감사한 일이라고 생각한다. 본인이 뭘 모르는지도 모를때가 많은데, 스스로 단점을 깨닫게 되는 기회가 되었다고 생각한다.</p>

<p>다음번에 발표할 기회가 있을때는 적어도 “이 내용은 내가 꿰뚫고 있어야 해”라는 마음가짐으로 발표하려 한다.
그러려면 <strong>또, 성장해야한다. 성장하자!</strong></p>]]></content><author><name>&lt;Jinseong&gt; &lt;Kong&gt;</name><email>&lt;wlstjd4013@gmail.com&gt;</email></author><category term="study" /><summary type="html"><![CDATA[]]></summary></entry></feed>